from langchain_aws import ChatBedrock
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.messages import HumanMessage
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts.chat import HumanMessagePromptTemplate
import datetime
import random
import json
import base64
import requests

def claude_invoke_model(prompt, image_media_type=None, image_data_base64=None, model_params={}):
    
    llm = ChatBedrock(
        region_name='us-east-1',
        model_id='anthropic.claude-3-sonnet-20240229-v1:0',
        # model_id='anthropic.claude-3-haiku-20240307-v1:0',
    )

    # llm = ChatOpenAI(model="gpt-4o")

    messages = [
        # SystemMessage(content="ユーザーから与えられたプロンプトをSDXLで画像を生成するためのプロンプトに変換してください。"),
        HumanMessage(content=prompt),
    ]

    chain = llm | StrOutputParser()

    output = chain.invoke(messages)

    return output

def revise_prompt(original_prompt, claude_revise_params):
    input_prompt = f"""
Revise the following image generation prompt to optimize it for Stable Diffusion, incorporating best practices:
    {original_prompt}
    Please consider the following guidelines in your revision:
    1. prompt must be include 1 girl and slightly sexy pose
    2. Be specific and descriptive, using vivid adjectives and clear nouns.
    3. Include details about composition, lighting, style, and mood.
    4. Mention specific artists or art styles if relevant.
    5. Use keywords like "highly detailed", "4k", "8k", or "photorealistic" if appropriate.
    6. Separate different concepts with commas.
    7. Place more important elements at the beginning of the prompt.
    8. Use weights (e.g., (keyword:1.2)) for emphasizing certain elements if necessary.
    9. If the original prompt is not in English, translate it to English.
    Your goal is to create a clear, detailed prompt that will result in a high-quality image generation with Stable Diffusion.
    Please provide your response in the following JSON format:
    {{"revised_prompt":"<Revised Prompt>"}}
    Ensure your response can be parsed as valid JSON. Do not include any explanations, comments, or additional text outside of the JSON structure.
"""

    output = claude_invoke_model(input_prompt,{})
    return output

def enhance_prompt(original_prompt, claude_enhance_params):
    input_prompt = f"""
    あなたは画像生成のための重要な文章を作成する専門家です。与えられた短い文脈から、より詳細で視覚的な100文字程度の日本語の文章を作成することが目標です。

    以下のコンテキストが与えられます：
    <context>
    {original_prompt}
    </context>

    このコンテキストを基に、以下の手順で作業を進めてください：

    1. 与えられたコンテキストを注意深く分析し、主要な要素や雰囲気を把握してください。
    2. コンテキストから想像できる様々な情景、感情、細部を考えてください。
    3. 視覚的に豊かで、画像生成に適した表現を使用してください。
    4. 100文字程度の日本語の文章にまとめてください。
    5. 出力はjson形式を使用してください。

    良い出力の例：
    - 「夕暮れの海岸で、波の音を聴きながら砂浜を歩く若いカップル。オレンジ色の空を背景に、二人の影が長く伸びている。」
    - 「雪に覆われた静かな森の中、一匹の狐が足跡を残しながらそっと歩いている。枝から落ちる雪の結晶が、月明かりに輝いている。」

    まず、<inner_monologue>タグ内で、コンテキストから連想できる様々なアイデアやイメージをブレインストーミングしてください。その後、最も適切で視覚的に魅力的な要素を選び、100文字程度の日本語の文章にまとめてください。

    最終的な出力は<output>タグ内に日本語で記述してください。
"""
    
    output = claude_invoke_model(input_prompt,{})
    return output

def check_image_quality(image_path, model_params={}):

    llm = ChatOpenAI(model="gpt-4o")
    base64_image = base64.b64encode(open(image_path, "rb").read()).decode("utf-8")

    image_template = {"image_url":{"url":f"data:image/png;base64,{base64_image}"}}

    system = (
        "Please evaluate the quality of the following image and provide feedback on its visual appeal and realism."
    )

    human_prompt = "{question}"
    human_message_template = HumanMessagePromptTemplate.from_template([human_prompt,image_template])
    prompt = ChatPromptTemplate.from_messages([("system", system), human_message_template])
    chain =  prompt | llm | StrOutputParser()

    question = """
You are an AI tasked with evaluating the quality of images generated by SDXL. Your role is to assess the given image based on four specific criteria and provide a score for each, along with a justification.

Please evaluate the image based on the following four criteria, scoring each on a scale of 0 to 5 points:

1. Hand and finger rendering: Assess whether the hands and fingers are drawn correctly and naturally.
2. Facial beauty: Evaluate the aesthetic appeal and realism of the face(s) in the image.
3. Background naturalness: Determine if the background looks natural and appropriate for the scene.
4. Absence of sexual explicitness: Check that the image is not sexually explicit or overly provocative.

For each criterion, carefully examine the image and consider the following:

1. Hand and finger rendering:
   - Are the proportions of the hands and fingers correct?
   - Do the hands and fingers look natural and anatomically accurate?
   - Are there any obvious distortions or errors in the rendering of hands and fingers?

2. Facial beauty:
   - Is the face symmetrical and well-proportioned?
   - Are the facial features (eyes, nose, mouth, etc.) realistic and harmonious?
   - Does the face have a pleasing aesthetic quality?

3. Background naturalness:
   - Does the background complement the main subject of the image?
   - Are there any inconsistencies or unnatural elements in the background?
   - Does the background contribute to the overall composition of the image?

4. Absence of sexual explicitness:
   - Is the image appropriate for a general audience?
   - Are there any overtly sexual or provocative elements?
   - Does the image maintain a tasteful and non-explicit presentation?

For each criterion, provide a brief justification for your score, explaining your reasoning. Then, assign a score from 0 to 5, where 0 is the lowest quality and 5 is the highest quality.

After evaluating all four criteria, calculate the total score by summing up the individual scores.

Present your evaluation in the following format and output in japanese:

<evaluation>
1. Hand and finger rendering:
   Justification: [Your justification here]
   Score: [0-5]

2. Facial beauty:
   Justification: [Your justification here]
   Score: [0-5]

3. Background naturalness:
   Justification: [Your justification here]
   Score: [0-5]

4. Absence of sexual explicitness:
   Justification: [Your justification here]
   Score: [0-5]

Total Score: [Sum of all scores]
</evaluation>

Ensure that your justifications are clear and concise, and that your scores accurately reflect your assessment of the image quality based on the given criteria.
"""
    output = chain.invoke(question)
    return output

def generate_image_from_prompt(prompt, revision_no ,model_params={}):
    url = "http://127.0.0.1:7860"

    seed = random.randint(0, 4294967295)

    payload = {
        "prompt": prompt,
        "negative_prompt": "easynegative, naked, paintings, sketches, bokeh, blur, (low quality:1.6), (normal quality:1.6), (worst quality:1.6), bad shadow, low res, jean, (monochrome, grayscale), polydactylism, skin spot, acnes, skin blemishes, age spot, (extra hands), (bad anatomy:1.5), brand, ((watermark:1.4)), bad feet, poorly drawn hands, poorly drawn face, mutation, Double vision in both eyes, bad eyes ratio, bad eyes size, bad eyes,deformed, bad proportions, gross proportions, missing arms, missing legs, extra digit, extra arms, extra leg, extra foot, ((multiple arms, multiple fingers, broken fingers)), ng_deepnegative_v1_75t, (muscles), (nipple over clothes),(nipples sticking out of clothes),(Belly button on clothes),excessive abs,bad-hands-5",
        "seed": seed,
        "quality": 1.0,
        "steps": 30,
        "height": 960,
        "width": 540,
        "restore_faces": True,
    }

    response = requests.post(url=f'{url}/sdapi/v1/txt2img', json=payload)
    r = response.json()

    dt_str = revision_no
    ## 画像を日付ディレクトリ下に保存
    ## 画像の保存先は、outputs/dt_str.png
    with open(f"outputs/{dt_str}.png", "wb") as f:
        f.write(base64.b64decode(r["images"][0]))

    print(f"Image generated successfully with seed: {seed}")
    return f"{dt_str}.png"

def get_prompt_from_image(image_path, model_params={}):
    url = "http://127.0.0.1:7860"

    with open(image_path, "rb") as f:
        image_data = f.read()

    payload = {
        "image_data": base64.b64encode(image_data).decode("utf-8"),
    }

    response = requests.post(url=f'{url}/sdapi/v1/img2txt', json=payload)
    r = response.json()

    print(f"Prompt extracted successfully")
    return r["prompt"]

def create_original_prompt():

    prompt = """
あなたは、カジュアルゲームの背景画像生成のための重要な役割を担っています。初めのキーとなる短文を考案することが、あなたの任務です。この短文は後に拡張され、Stable Diffusionのプロンプトに変換されるため、非常に重要です。

以下の点に注意して短文を生成してください：

1. 出力したい対象は女性です。
2. アプリがBANされないよう、過度にセクシーな表現は避けてください。
3. 画像の多様性を確保するため、国籍、髪の色、表情、背景などを慎重に考慮してください。
4. 各短文は、ユニークで魅力的な画像のアイデアを提供するものにしてください。

短文を生成する際は、以下の手順に従ってください：

1. 女性の特徴（国籍、髪の色、表情など）を決めます。
2. 背景や設定（場所、時間帯、雰囲気など）を考えます。
3. 女性の行動や姿勢を想像します。
4. これらの要素を組み合わせて、簡潔で印象的な短文を作成します。

出力形式はJSONフォーマットで、日本語で記述してください。以下の形式に従ってください：

{
  "短文": [
    {
      "id": 1,
      "phrase": "短文1"
    },
    {
      "id": 2,
      "phrase": "短文2"
    },
    ...
  ]
}

<num_outputs>{{NUM_OUTPUTS}}</num_outputs>個の短文を生成してください。

以下は出力例です：

{
  "短文": [
    {
      "id": 1,
      "phrase": "満月の下で踊る金髪の妖精"
    },
    {
      "id": 2,
      "phrase": "古代遺跡を探索する冒険家の女性"
    },
    {
      "id": 3,
      "phrase": "未来都市のカフェでコーヒーを飲む黒髪の女性"
    }
  ]
}

それでは、指定された数の短文を生成し、JSONフォーマットで出力してください。
"""

    output = claude_invoke_model(prompt,{})
    return output

if __name__ == "__main__":
    original_prompt = create_original_prompt()

    ## original_promptをJSON形式からDict形式に変換
    prompt_dict = json.loads(original_prompt)
    ## prompt_dict内の"短文"のリストを取得
    prompt_list = prompt_dict["短文"]

    ## prompt_list内の各要素の"phrase"を取得
    for prompt in prompt_list:
        print(f"Prompt: {prompt['phrase']}")
        original_prompt = prompt['phrase']

        max_prompt_revisions = 10

        start_timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        print(f"Original Prompt: {original_prompt}")

        for revision in range(max_prompt_revisions + 1):
            try:
                print(f"Prompt Revision {revision + 1}")
                prompt = enhance_prompt(original_prompt, {})
                prompt = prompt.split("<output>")[1].split("</output>")[0]
                print(f"Enhanced Prompt: {prompt}")
                prompt = revise_prompt(prompt, {})
                prompt = json.loads(prompt)["revised_prompt"]
                print(f"Revised Prompt: {prompt}")
                revision_no = start_timestamp + f"_{revision + 1}"
                filename = generate_image_from_prompt(prompt,revision_no ,{})

                image_path = f"SDXL/outputs/{filename}"
                # output = check_image_quality(image_path, {})
                # print(f"Image Quality: {output}")
                # ## output内の文字列の<evaluation>の内部のTotal Score：文字列を取り出す
                # score = output.split("<evaluation>")[1].split("</evaluation>")[0].split("Total Score: ")[1]
                # print(f"Image Quality Score: {score}")

                ## scoreが15点未満の場合、画像を移動する
                # if int(score) < 15:
                #     print("Image quality is low. Moving image to the 'low_quality' directory.")
                #     import shutil
                #     shutil.move(image_path, f"outputs/low_quality/{filename}")
                # else:
                #     print("Image quality is good.")
            except Exception as e:
                print(f"Error: {e}")
                continue

